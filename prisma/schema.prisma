datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Kullanıcı Rolleri
enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

// Kullanıcı Modeli
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  interests     String[]
  image         String?
  password      String
  role          UserRole  @default(USER)

  // Ek profil alanları
  website       String?
  company       String?
  phone         String?
  address       String?
  city          String?
  country       String?
  pincode       String?
  bio           String?

  // Relations
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  registrations EventRegistration[]
  tickets       Ticket[]         // Yeni: Kullanıcının biletleri

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// OAuth Hesapları
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Oturum Modeli
model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            String                @id @default(cuid())
  title         String
  description   String?
  category      String
  startDate     DateTime
  endDate       DateTime?
  startTime     String
  endTime       String?
  location      String                // "Online" or "Venue"

  // Venue bilgileri
  venueName     String?
  venueAddress  String?
  venueCity     String?

  // Ticket bilgileri
  eventType     String                // "free" or "ticketed"
  ticketName    String?
  ticketPrice   Float?

  capacity      Int?
  imageUrl      String?

  author        User                  @relation(fields: [authorId], references: [id])
  authorId      String

  registrations EventRegistration[]
  tickets       Ticket[]              // Yeni: Bu etkinliğin biletleri

  isPublished   Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

// Etkinlik Kayıt Modeli (Basit kayıt için)
model EventRegistration {
  id          String             @id @default(cuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  event       Event              @relation(fields: [eventId], references: [id])
  eventId     String
  status      RegistrationStatus @default(PENDING)
  createdAt   DateTime           @default(now())

  @@unique([userId, eventId])
}

// Yeni: Bilet Modeli
model Ticket {
  id           String       @id @default(cuid())
  ticketNumber String       @unique
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  event        Event        @relation(fields: [eventId], references: [id])
  eventId      String
  
  // Bilet detayları
  status       TicketStatus @default(ACTIVE)
  quantity     Int          @default(1)
  totalAmount  Float        @default(0)
  qrCode       String       @unique
  
  // Katılımcı bilgileri
  attendees    TicketAttendee[]
  
  // Ödeme bilgileri
  paymentId    String?
  paymentStatus PaymentStatus @default(PENDING)
  
  purchaseDate DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Yeni: Bilet Katılımcı Modeli
model TicketAttendee {
  id       String @id @default(cuid())
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String
  
  fullName String
  email    String
  phone    String?
  
  // Giriş bilgileri
  checkedIn Boolean @default(false)
  checkInAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Bilet Durumu
enum TicketStatus {
  ACTIVE      // Aktif, kullanılabilir
  USED        // Kullanılmış
  CANCELLED   // İptal edilmiş
  EXPIRED     // Süresi dolmuş
  REFUNDED    // İade edilmiş
}

// Ödeme Durumu
enum PaymentStatus {
  PENDING     // Beklemede
  COMPLETED   // Tamamlandı
  FAILED      // Başarısız
  REFUNDED    // İade edildi
}

// Kayıt Durumu
enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// NextAuth için Doğrulama Token'ı
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}